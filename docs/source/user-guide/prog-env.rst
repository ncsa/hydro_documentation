.. _programming_environments:

Programming Environments
=========================

.. _software:

Software
-------------

-  RHEL 8.4
-  Kernel 4.18.0
-  Software

   -  Currently software is installed using Spack
   -  A complete list of installed software can be generated by the
      command ``module avail`` on the Hydro login node.
   -  A sample of select packages

      -  OpenMPI
      -  FFTW
      -  Python

         -  Tensorflow

      -  GCC 11.3.0
      -  R
      -  GDAL
      -  AWS CLI

.. _shells-and-modules:

Shells and Modules
---------------------------

The default shell is /bin/bash. You can change it by sending a request
via email to help+hydro@ncsa.illinois.edu. 

The user environment is controlled using the modules environment
management system. Modules may be loaded, unloaded, or swapped either on
a command line or in your $HOME/.bashrc (.cshrc for csh ) shell startup
file.

The command "*module avail \| more"* will display the available modules on
the system one page at a time.

The module command is a user interface to the Lmod package. The Lmod
package provides for the dynamic modification of the user’s environment
via *modulefiles* (a modulefile contains the information needed to
configure the shell for an application). Modules are independent of the
user’s shell, so both tcsh and bash users can use the same commands to
change the environment.

`Lmod User
Guide <https://lmod.readthedocs.io/en/latest/010_user.html>`__

Useful Module commands:

+----------------------------------+----------------------------------+
| Command                          | Description                      |
+==================================+==================================+
| module avail                     | lists all available modules      |
+----------------------------------+----------------------------------+
| module list                      | lists currently loaded modules   |
+----------------------------------+----------------------------------+
| module spider foo                | search for modules named foo     |
+----------------------------------+----------------------------------+
| module help *modulefile*         | help on module modulefile        |
+----------------------------------+----------------------------------+
| module display *modulefile*      | Display information about        |
|                                  | modulefile                       |
+----------------------------------+----------------------------------+
| module load *modulefile*         | load modulefile into current     |
|                                  | shell environment                |
+----------------------------------+----------------------------------+
| module unload *modulefile*       | remove modulefile from current   |
|                                  | shell environment                |
+----------------------------------+----------------------------------+
| module swap *modulefile1         | unload modulefile1 and load      |
| modulefile2*                     | modulefile2                      |
+----------------------------------+----------------------------------+

**To include a particular software stack in your default environment for
hydro login and computes**

Log into hydro login node, manipulate your modulefile stack until
satisfied. *module save;* This will create a .lmod.d/default file. It
will be loaded on hydro login or computes on next login or job
execution.

Useful User Defined Module Collections:

+----------------------------------+----------------------------------+
| Command                          | Description                      |
+==================================+==================================+
| module save                      | Save current modulefile stack to |
|                                  | ~/.lmod.d/default                |
+----------------------------------+----------------------------------+
| module save collection_name      | Save current modulefile stack to |
|                                  | ~/.lmod.d/collectioin_name       |
+----------------------------------+----------------------------------+
| module *restore*                 | Load ~/.lmod.d/default if it     |
|                                  | exists or System default         |
+----------------------------------+----------------------------------+
| module *restore collection_name* | Load your                        |
|                                  | ~/.lmod.d/collectioin_name       |
+----------------------------------+----------------------------------+
| module *reset*                   | Reset your modulefiles to System |
|                                  | default                          |
+----------------------------------+----------------------------------+
| module *disable collection_name* | Disable collection_name by       |
|                                  | adding collection_name~          |
+----------------------------------+----------------------------------+
| module *savelist*                | List all your                    |
|                                  | ~/.lmod.d/collections            |
+----------------------------------+----------------------------------+
| module describe collection_name  | List collection_name modulefiles |
+----------------------------------+----------------------------------+


Programming Environments
------------------------------

The GNU compilers (GCC) version 11.3.0 are in the default user
environment. 

.. _compiling:

Compiling
------------

| To compile MPI code, use the *mpicc, mpiCC, or mpif90* compiler
  wrappers to automatically include the OpenMPI libraries.
| For example:
| *mpicc -o mpi_hello mpi_hello.c*
| If the code also uses OpenMP, include the -fopenmp flag:
| *mpicc -o omp_mpi_hello omp_mpi_hello.c -fopenmp*


Other Programming Environments
--------------------------------

.. _python:

Python
--------

The default gcc (latest version) programming environment for either ``modtree/cpu`` or ``modtree/gpu`` contains:

Python
-----------------------------------
If you want a basic recent Python setup, use the python installation under the gcc module.  You can add modules via ``pip3 install --user <modulename>``,  setup virtual environments, and customize as needed for your workflow but starting from a smaller installed base of python than Anaconda.

::

  $ module load gcc python
  $ which python
  /sw/spack/hydrogpu-2022-06/apps/python/3.9.13-gcc-11.3.0-jkmnqio/bin/python
  $ module list

  Currently Loaded Modules:
    1) modtree/gpu            3) user/license_file   5) gcc/11.3.0    7) openmpi/4.1.4
    2) scripts/script_paths   4) StdEnv              6) cuda/11.7.0   8) python/3.9.13

You can view the python packages installed in this environment using ``pip3 list``

Anaconda
--------
The Anaconda Python distribution is also available on Hydro by loading either the ``anaconda3_cpu`` or ``anaconda3_gpu`` modules. Anaconda comes with many included Python packages, and also uses the conda pagakage manager for viewing and installing packages. 

anaconda3_cpu
---------------------------
Use python from the ``anaconda3_cpu`` module if you need some of the modules provided by Anaconda in your python workflow.  For GPU nodes, use ``anaconda3_gpu``.

::

  $ module load modtree/cpu

  Due to MODULEPATH changes, the following have been reloaded:
    1) gcc/11.3.0     2) openmpi/4.1.4

  The following have been reloaded with a version change:
    1) modtree/gpu => modtree/cpu

  $ module load gcc anaconda3_cpu
  $ which conda
  /sw/external/python/anaconda3_cpu/bin/conda
  $ module list

  Currently Loaded Modules:
    1) scripts/script_paths   3) StdEnv        5) gcc/11.3.0      7) anaconda3_cpu/4.13.0
    2) user/license_file      4) modtree/cpu   6) openmpi/4.1.4

The current list of modules available in anaconda3_cpu is shown via ``conda list``, including tensorflow, pytorch, etc.

anaconda3_gpu (for cuda)
------------------------
Similar to the setup for anaconda_cpu, we have gpu versions of anaconda3 (module load anaconda3_gpu) and have installed pytorch and tensorflow cuda-aware python modules into these versions.  You may use these module when working with the gpu nodes.  See conda list after loading the module to review what is already installed.  As with anaconda3_cpu, let Hydro staff know if there are generally useful modules you would like us to try to install for the broader community.

Installing packages
------------------- 
On Hydro, you may install your own python software stacks as needed.  There are a couple choices when customizing your python setup.  You may use any of these methods with any of the python versions or instances described below (or you may install your own python versions):

1. pip3 (Python module or Anaconda): ``pip3 install --user <python_package>``
	useful when you need just 1 python environment per python version or instance.
2. venv python virtual environment (Python module or Anaconda):
	can name environments (metadata) and have multiple environments per python version or instance
3. conda environments  (Anaconda only)
	similar to venv but with more flexibility. See the `Managing Environments <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>`_ section of the Conda getting started guide to learn how to customize Conda for your workflow and add extra python modules to your environment.
